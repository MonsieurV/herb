#+SEQ_TODO: NEXT(t) TODO(t) WAITING(w) MAYBE(m) | DONE(d) PARTIAL(p) CANCELLED(c)
* IDEAS
** Use set in injected styles instead of map to ensure no duplicates
** Use tree-seq when resolving styles
** [[https://github.com/noprompt/garden/issues/24][Support for existing CSS resources · Issue #24 · noprompt/garden]]
** [[https://www.w3.org/wiki/Dynamic_style_-_manipulating_CSS_with_JavaScript][Dynamic style - manipulating CSS with JavaScript - W3C Wiki]]
* TESTS
** DONE Test for inheritance, make sure the chain is respected for modes and media
   CLOSED: [2018-02-17 Sat 20:18]
** TODO Test that the classname contains a full namespace
** [[https://github.com/igrishaev/etaoin/blob/master/test/etaoin/api_test.clj][etaoin/api_test.clj at master · igrishaev/etaoin]]
** [[https://github.com/igrishaev/etaoin][igrishaev/etaoin: Pure Clojure Webdriver protocol implementation]]
* DOCS
** TODO refer vs refer-macros
** DONE group args
   CLOSED: [2018-12-27 Thu 16:53]
* DEMO
** DONE demo inheritance variants
   CLOSED: [2018-11-18 Sun 16:32]
** DONE demo state
   CLOSED: [2018-11-18 Sun 16:32]
** DONE demo media
   CLOSED: [2018-11-30 Fri 20:04]
** DONE demo keys
   CLOSED: [2018-11-18 Sun 16:32]
** DONE demo anon
   CLOSED: [2018-11-30 Fri 20:04]
** DONE demo group/defgroup
   CLOSED: [2018-11-18 Sun 16:32]
*** Demo meta data in groups
** DONE demo nested
   CLOSED: [2018-11-30 Fri 20:04]
** TODO Add demo for selecting elements by class
** DONE Demo global-style!
   CLOSED: [2018-11-30 Fri 20:04]
** MAYBE demo using multiple classes using reagent and or join-classes fn
** TODO Demo advanced compilation / debugging
** TODO Add <id
** TODO Add clj usage
* &env macro
  In order to evaluate things in context, you first need to garner the bindings
  in the current context. Fortunately, Clojure macros provide an implicit
  argument ~&env~ that’s a map of the local bindings available at macro-expansion
  time. You can extract from ~&env~ the values associated with the bindings and
  zip them up with their names into a map for the local context, as shown next.

  #+BEGIN_SRC clojure
    (defmacro local-context []
      (let [symbols (keys &env)] ; Use the special &env
        (zipmap (map (fn [sym] `(quote ~sym)) ; Zip up the local names with local values
                     symbols)
                symbols)))
  #+END_SRC

  One interesting point is the use of the ~&env~ symbol. This special symbol holds
  the value of the bindings available to the macro in which it occurs. The
  bindings are of a special type that is opaque to your direct inspection, but by
  putting them into the return map you can build a Clojure data structure from
  them for direct use and manipulation. Observe ~local-context~ in action:

  #+BEGIN_SRC clojure
    (local-context)
    ;=> {}

    (let [a 1, b 2, c 3]
      (let [b 200]
        (local-context)))
    ;=> {a 1, b 200, c 3}
  #+END_SRC

  The ~local-context~ macro provides a map to the most immediate lexical bindings,
  which is what you want.

* TODO Fix single rule not causing newline
* DONE Mention clojurescript version and requiring functions
  CLOSED: [2019-02-04 Mon 12:57]
* CANCELLED Change defgroup to stylegroup
  CLOSED: [2019-02-04 Mon 12:57]
* PARTIAL What happens when trying to extend a style group with no arguments?
  CLOSED: [2018-10-03 Wed 19:09]
  It thows the defgroup error with a blank for component. Consider improving error message
* DONE Add note about setting debug flag to false on prod builds
  CLOSED: [2019-02-04 Mon 12:57]
* TODO Look into using more complex classname chars
  I know css supports a larger range of classname chars but I think passing
  through hiccup or reagent they get sanitized
* TODO [[https://github.com/divs1210/xodarap][divs1210/xodarap: Fearless recursion in Clojure!]]
* TODO Defgroup in clj might need a simpler syntax when calling from <style
* TODO ensure key works with lots of variation
* TODO Debugging in prod build
* TODO Finish tests
* TODO Add instance support with custom injection point
* TODO Support various meta options inside supports/media query
* TODO Add better key meta second example
* TODO Add metadata spec
* TODO Fix HTML syntax highlighting
* TODO Global style vendor prefixes
* TODO Have data-herb reflect namespace when goog.debug is disabled
* TODO Munge key names?
* TODO Log statements
